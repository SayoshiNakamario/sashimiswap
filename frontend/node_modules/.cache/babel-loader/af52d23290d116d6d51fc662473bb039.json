{"ast":null,"code":"import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Contracts } from './lib/contracts.js'; // import { Account } from './lib/accounts.js'\n\nimport { EVM } from './lib/evm.js';\nimport { contractAddresses } from './lib/constants';\nexport class Sushi {\n  constructor(provider, networkId, testing, options) {\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(provider, options.ethereumNodeTimeout || 10000);\n      } else {\n        realProvider = new Web3.providers.HttpProvider(provider, options.ethereumNodeTimeout || 10000);\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot();\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.sushiAddress = contractAddresses.sushi[networkId];\n    this.masterChefAddress = contractAddresses.masterChef[networkId];\n    this.wethAddress = contractAddresses.weth[networkId];\n  } // async resetEVM() {\n  //   this.testing.resetEVM(this.snapshot)\n  // }\n  // addAccount(address, number) {\n  //   this.accounts.push(new Account(this.contracts, address, number))\n  // }\n\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider);\n    this.contracts.setProvider(provider, networkId);\n    this.operation.setNetworkId(networkId);\n  } // setDefaultAccount(account) {\n  //   this.web3.eth.defaultAccount = account\n  //   this.contracts.setDefaultAccount(account)\n  // }\n  // getDefaultAccount() {\n  //   return this.web3.eth.defaultAccount\n  // }\n  // loadAccount(account) {\n  //   const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey)\n  //\n  //   if (\n  //     !newAccount ||\n  //     (account.address &&\n  //       account.address.toLowerCase() !== newAccount.address.toLowerCase())\n  //   ) {\n  //     throw new Error(`Loaded account address mismatch.\n  //       Expected ${account.address}, got ${\n  //       newAccount ? newAccount.address : null\n  //     }`)\n  //   }\n  // }\n\n\n  toBigN(a) {\n    return BigNumber(a);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Kyle/Documents/FOGmist/sashimiswap/frontend/src/sushi/Sushi.js"],"names":["Web3","BigNumber","Contracts","EVM","contractAddresses","Sushi","constructor","provider","networkId","testing","options","realProvider","includes","providers","WebsocketProvider","ethereumNodeTimeout","HttpProvider","web3","snapshot","defaultAccount","eth","contracts","sushiAddress","sushi","masterChefAddress","masterChef","wethAddress","weth","setProvider","operation","setNetworkId","toBigN","a"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,oBAA1B,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,SAASC,iBAAT,QAAkC,iBAAlC;AAEA,OAAO,MAAMC,KAAN,CAAY;AACjBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACjD,QAAIC,YAAJ;;AAEA,QAAI,OAAOJ,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAIA,QAAQ,CAACK,QAAT,CAAkB,KAAlB,CAAJ,EAA8B;AAC5BD,QAAAA,YAAY,GAAG,IAAIX,IAAI,CAACa,SAAL,CAAeC,iBAAnB,CACbP,QADa,EAEbG,OAAO,CAACK,mBAAR,IAA+B,KAFlB,CAAf;AAID,OALD,MAKO;AACLJ,QAAAA,YAAY,GAAG,IAAIX,IAAI,CAACa,SAAL,CAAeG,YAAnB,CACbT,QADa,EAEbG,OAAO,CAACK,mBAAR,IAA+B,KAFlB,CAAf;AAID;AACF,KAZD,MAYO;AACLJ,MAAAA,YAAY,GAAGJ,QAAf;AACD;;AAED,SAAKU,IAAL,GAAY,IAAIjB,IAAJ,CAASW,YAAT,CAAZ;;AAEA,QAAIF,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAe,IAAIN,GAAJ,CAAQQ,YAAR,CAAf;AACA,WAAKO,QAAL,GAAgB,KAAKT,OAAL,CAAaS,QAAb,EAAhB;AACD;;AAED,QAAIR,OAAO,CAACS,cAAZ,EAA4B;AAC1B,WAAKF,IAAL,CAAUG,GAAV,CAAcD,cAAd,GAA+BT,OAAO,CAACS,cAAvC;AACD;;AACD,SAAKE,SAAL,GAAiB,IAAInB,SAAJ,CAAcS,YAAd,EAA4BH,SAA5B,EAAuC,KAAKS,IAA5C,EAAkDP,OAAlD,CAAjB;AACA,SAAKY,YAAL,GAAoBlB,iBAAiB,CAACmB,KAAlB,CAAwBf,SAAxB,CAApB;AACA,SAAKgB,iBAAL,GAAyBpB,iBAAiB,CAACqB,UAAlB,CAA6BjB,SAA7B,CAAzB;AACA,SAAKkB,WAAL,GAAmBtB,iBAAiB,CAACuB,IAAlB,CAAuBnB,SAAvB,CAAnB;AACD,GAlCgB,CAoCjB;AACA;AACA;AAEA;AACA;AACA;;;AAEAoB,EAAAA,WAAW,CAACrB,QAAD,EAAWC,SAAX,EAAsB;AAC/B,SAAKS,IAAL,CAAUW,WAAV,CAAsBrB,QAAtB;AACA,SAAKc,SAAL,CAAeO,WAAf,CAA2BrB,QAA3B,EAAqCC,SAArC;AACA,SAAKqB,SAAL,CAAeC,YAAf,CAA4BtB,SAA5B;AACD,GAhDgB,CAkDjB;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAuB,EAAAA,MAAM,CAACC,CAAD,EAAI;AACR,WAAO/B,SAAS,CAAC+B,CAAD,CAAhB;AACD;;AA5EgB","sourcesContent":["import Web3 from 'web3'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Contracts } from './lib/contracts.js'\r\n// import { Account } from './lib/accounts.js'\r\nimport { EVM } from './lib/evm.js'\r\n\r\nimport { contractAddresses } from './lib/constants'\r\n\r\nexport class Sushi {\r\n  constructor(provider, networkId, testing, options) {\r\n    var realProvider\r\n\r\n    if (typeof provider === 'string') {\r\n      if (provider.includes('wss')) {\r\n        realProvider = new Web3.providers.WebsocketProvider(\r\n          provider,\r\n          options.ethereumNodeTimeout || 10000,\r\n        )\r\n      } else {\r\n        realProvider = new Web3.providers.HttpProvider(\r\n          provider,\r\n          options.ethereumNodeTimeout || 10000,\r\n        )\r\n      }\r\n    } else {\r\n      realProvider = provider\r\n    }\r\n\r\n    this.web3 = new Web3(realProvider)\r\n\r\n    if (testing) {\r\n      this.testing = new EVM(realProvider)\r\n      this.snapshot = this.testing.snapshot()\r\n    }\r\n\r\n    if (options.defaultAccount) {\r\n      this.web3.eth.defaultAccount = options.defaultAccount\r\n    }\r\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options)\r\n    this.sushiAddress = contractAddresses.sushi[networkId]\r\n    this.masterChefAddress = contractAddresses.masterChef[networkId]\r\n    this.wethAddress = contractAddresses.weth[networkId]\r\n  }\r\n\r\n  // async resetEVM() {\r\n  //   this.testing.resetEVM(this.snapshot)\r\n  // }\r\n\r\n  // addAccount(address, number) {\r\n  //   this.accounts.push(new Account(this.contracts, address, number))\r\n  // }\r\n\r\n  setProvider(provider, networkId) {\r\n    this.web3.setProvider(provider)\r\n    this.contracts.setProvider(provider, networkId)\r\n    this.operation.setNetworkId(networkId)\r\n  }\r\n\r\n  // setDefaultAccount(account) {\r\n  //   this.web3.eth.defaultAccount = account\r\n  //   this.contracts.setDefaultAccount(account)\r\n  // }\r\n\r\n  // getDefaultAccount() {\r\n  //   return this.web3.eth.defaultAccount\r\n  // }\r\n\r\n  // loadAccount(account) {\r\n  //   const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey)\r\n  //\r\n  //   if (\r\n  //     !newAccount ||\r\n  //     (account.address &&\r\n  //       account.address.toLowerCase() !== newAccount.address.toLowerCase())\r\n  //   ) {\r\n  //     throw new Error(`Loaded account address mismatch.\r\n  //       Expected ${account.address}, got ${\r\n  //       newAccount ? newAccount.address : null\r\n  //     }`)\r\n  //   }\r\n  // }\r\n\r\n  toBigN(a) {\r\n    return BigNumber(a)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}