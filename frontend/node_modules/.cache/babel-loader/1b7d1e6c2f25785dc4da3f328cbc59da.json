{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kyle\\\\Documents\\\\FOGmist\\\\sashimiswap\\\\frontend\\\\src\\\\contexts\\\\Transactions\\\\TransactionsProvider.tsx\";\nimport React, { useCallback, useEffect, useReducer } from 'react';\nimport Context from './context';\nimport reducer, { initialState, setTransactions, addTransaction } from './reducer';\n\nconst TransactionsProvider = ({\n  children\n}) => {\n  const [{\n    initialized,\n    transactions\n  }, dispatch] = useReducer(reducer, initialState);\n  const handleAddTransaction = useCallback(tx => {\n    dispatch(addTransaction(tx));\n  }, [dispatch]);\n  const fetchTransactions = useCallback(async () => {\n    try {\n      const txsRaw = localStorage.getItem('transactions');\n      const txs = JSON.parse(txsRaw) || {};\n      dispatch(setTransactions(txs));\n    } catch (e) {\n      console.log(e);\n    }\n  }, [dispatch]);\n  useEffect(() => {\n    if (initialized) {\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n    }\n  }, [initialized, transactions]);\n  useEffect(() => {\n    fetchTransactions();\n  }, [fetchTransactions]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      transactions,\n      onAddTransaction: handleAddTransaction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default TransactionsProvider;","map":{"version":3,"sources":["C:/Users/Kyle/Documents/FOGmist/sashimiswap/frontend/src/contexts/Transactions/TransactionsProvider.tsx"],"names":["React","useCallback","useEffect","useReducer","Context","reducer","initialState","setTransactions","addTransaction","TransactionsProvider","children","initialized","transactions","dispatch","handleAddTransaction","tx","fetchTransactions","txsRaw","localStorage","getItem","txs","JSON","parse","e","console","log","setItem","stringify","onAddTransaction"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,UAAxC,QAA0D,OAA1D;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,IACEC,YADF,EAEEC,eAFF,EAGEC,cAHF,QAIO,WAJP;;AAOA,MAAMC,oBAA8B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvD,QAAM,CAAC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAD,EAAgCC,QAAhC,IAA4CV,UAAU,CAACE,OAAD,EAAUC,YAAV,CAA5D;AAEA,QAAMQ,oBAAoB,GAAGb,WAAW,CAAEc,EAAD,IAAqB;AAC5DF,IAAAA,QAAQ,CAACL,cAAc,CAACO,EAAD,CAAf,CAAR;AACD,GAFuC,EAErC,CAACF,QAAD,CAFqC,CAAxC;AAIA,QAAMG,iBAAiB,GAAGf,WAAW,CAAC,YAAY;AAChD,QAAI;AACF,YAAMgB,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAf;AACA,YAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAX,KAAyC,EAArD;AACAJ,MAAAA,QAAQ,CAACN,eAAe,CAACa,GAAD,CAAhB,CAAR;AACD,KAJD,CAIE,OAAOG,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GARoC,EAQlC,CAACV,QAAD,CARkC,CAArC;AAUAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,WAAJ,EAAiB;AACfO,MAAAA,YAAY,CAACQ,OAAb,CAAqB,cAArB,EAAqCL,IAAI,CAACM,SAAL,CAAef,YAAf,CAArC;AACD;AACF,GAJQ,EAIN,CAACD,WAAD,EAAcC,YAAd,CAJM,CAAT;AAMAV,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AACvBJ,MAAAA,YADuB;AAEvBgB,MAAAA,gBAAgB,EAAEd;AAFK,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGJ,QAJH,CADF;AAQD,CAnCD;;AAqCA,eAAeD,oBAAf","sourcesContent":["import React, { useCallback, useEffect, useReducer } from 'react'\r\n\r\nimport Context from './context'\r\nimport reducer, {\r\n  initialState,\r\n  setTransactions,\r\n  addTransaction,\r\n} from './reducer'\r\nimport { Transaction, TransactionsMap } from './types'\r\n\r\nconst TransactionsProvider: React.FC = ({ children }) => {\r\n  const [{ initialized, transactions }, dispatch] = useReducer(reducer, initialState)\r\n\r\n  const handleAddTransaction = useCallback((tx: Transaction) => {\r\n    dispatch(addTransaction(tx))\r\n  }, [dispatch])\r\n\r\n  const fetchTransactions = useCallback(async () => {\r\n    try {\r\n      const txsRaw = localStorage.getItem('transactions')\r\n      const txs = JSON.parse(txsRaw) as TransactionsMap || {}\r\n      dispatch(setTransactions(txs))\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (initialized) {\r\n      localStorage.setItem('transactions', JSON.stringify(transactions))\r\n    }\r\n  }, [initialized, transactions])\r\n\r\n  useEffect(() => {\r\n    fetchTransactions()\r\n  }, [fetchTransactions])\r\n\r\n  return (\r\n    <Context.Provider value={{\r\n      transactions,\r\n      onAddTransaction: handleAddTransaction,\r\n    }}>\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport default TransactionsProvider"]},"metadata":{},"sourceType":"module"}