{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kyle\\\\Documents\\\\FOGmist\\\\sashimiswap\\\\frontend\\\\src\\\\contexts\\\\YamProvider\\\\YamProvider.tsx\";\nimport React, { createContext, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { Yam } from '../../sushi';\nexport const Context = createContext({\n  yam: undefined\n});\n\nconst YamProvider = ({\n  children\n}) => {\n  const {\n    ethereum\n  } = useWallet();\n  const [yam, setYam] = useState(); // @ts-ignore\n\n  window.yam = yam; // @ts-ignore\n\n  window.eth = ethereum;\n  useEffect(() => {\n    if (ethereum) {\n      const chainId = Number(ethereum.chainId);\n      const yamLib = new Yam(ethereum, chainId, false, {\n        defaultAccount: ethereum.selectedAddress,\n        defaultConfirmations: 1,\n        autoGasMultiplier: 1.5,\n        testing: false,\n        defaultGas: '6000000',\n        defaultGasPrice: '1000000000000',\n        accounts: [],\n        ethereumNodeTimeout: 10000\n      });\n      setYam(yamLib);\n      window.yamsauce = yamLib;\n    }\n  }, [ethereum]);\n  return /*#__PURE__*/React.createElement(Context.Provider, {\n    value: {\n      yam\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 10\n    }\n  }, children);\n};\n\nexport default YamProvider;","map":{"version":3,"sources":["C:/Users/Kyle/Documents/FOGmist/sashimiswap/frontend/src/contexts/YamProvider/YamProvider.tsx"],"names":["React","createContext","useEffect","useState","useWallet","Yam","Context","yam","undefined","YamProvider","children","ethereum","setYam","window","eth","chainId","Number","yamLib","defaultAccount","selectedAddress","defaultConfirmations","autoGasMultiplier","testing","defaultGas","defaultGasPrice","accounts","ethereumNodeTimeout","yamsauce"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AAEA,SAASC,SAAT,QAA0B,YAA1B;AAEA,SAASC,GAAT,QAAoB,aAApB;AAMA,OAAO,MAAMC,OAAO,GAAGL,aAAa,CAAa;AAC/CM,EAAAA,GAAG,EAAEC;AAD0C,CAAb,CAA7B;;AAUP,MAAMC,WAAqB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAkCP,SAAS,EAAjD;AACA,QAAM,CAACG,GAAD,EAAMK,MAAN,IAAgBT,QAAQ,EAA9B,CAF8C,CAI9C;;AACAU,EAAAA,MAAM,CAACN,GAAP,GAAaA,GAAb,CAL8C,CAM9C;;AACAM,EAAAA,MAAM,CAACC,GAAP,GAAaH,QAAb;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,QAAJ,EAAc;AACZ,YAAMI,OAAO,GAAGC,MAAM,CAACL,QAAQ,CAACI,OAAV,CAAtB;AACA,YAAME,MAAM,GAAG,IAAIZ,GAAJ,CAAQM,QAAR,EAAkBI,OAAlB,EAA2B,KAA3B,EAAkC;AAC/CG,QAAAA,cAAc,EAAEP,QAAQ,CAACQ,eADsB;AAE/CC,QAAAA,oBAAoB,EAAE,CAFyB;AAG/CC,QAAAA,iBAAiB,EAAE,GAH4B;AAI/CC,QAAAA,OAAO,EAAE,KAJsC;AAK/CC,QAAAA,UAAU,EAAE,SALmC;AAM/CC,QAAAA,eAAe,EAAE,eAN8B;AAO/CC,QAAAA,QAAQ,EAAE,EAPqC;AAQ/CC,QAAAA,mBAAmB,EAAE;AAR0B,OAAlC,CAAf;AAUAd,MAAAA,MAAM,CAACK,MAAD,CAAN;AACAJ,MAAAA,MAAM,CAACc,QAAP,GAAkBV,MAAlB;AACD;AACF,GAhBQ,EAgBN,CAACN,QAAD,CAhBM,CAAT;AAkBA,sBAAO,oBAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAE;AAAEJ,MAAAA;AAAF,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCG,QAAnC,CAAP;AACD,CA5BD;;AA8BA,eAAeD,WAAf","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\r\n\r\nimport { useWallet } from 'use-wallet'\r\n\r\nimport { Yam } from '../../sushi'\r\n\r\nexport interface YamContext {\r\n  yam?: typeof Yam\r\n}\r\n\r\nexport const Context = createContext<YamContext>({\r\n  yam: undefined,\r\n})\r\n\r\ndeclare global {\r\n  interface Window {\r\n    yamsauce: any\r\n  }\r\n}\r\n\r\nconst YamProvider: React.FC = ({ children }) => {\r\n  const { ethereum }: { ethereum: any } = useWallet()\r\n  const [yam, setYam] = useState<any>()\r\n\r\n  // @ts-ignore\r\n  window.yam = yam\r\n  // @ts-ignore\r\n  window.eth = ethereum\r\n\r\n  useEffect(() => {\r\n    if (ethereum) {\r\n      const chainId = Number(ethereum.chainId)\r\n      const yamLib = new Yam(ethereum, chainId, false, {\r\n        defaultAccount: ethereum.selectedAddress,\r\n        defaultConfirmations: 1,\r\n        autoGasMultiplier: 1.5,\r\n        testing: false,\r\n        defaultGas: '6000000',\r\n        defaultGasPrice: '1000000000000',\r\n        accounts: [],\r\n        ethereumNodeTimeout: 10000,\r\n      })\r\n      setYam(yamLib)\r\n      window.yamsauce = yamLib\r\n    }\r\n  }, [ethereum])\r\n\r\n  return <Context.Provider value={{ yam }}>{children}</Context.Provider>\r\n}\r\n\r\nexport default YamProvider\r\n"]},"metadata":{},"sourceType":"module"}