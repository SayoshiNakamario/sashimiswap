{"ast":null,"code":"import { ethers } from 'ethers';\nimport { Contract } from 'web3-eth-contract';\nimport ERC20Abi from './lib/abi/erc20.json';\nimport BigNumber from 'bignumber.js';\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000\n  }\n};\nexport const getMasterChefAddress = sushi => {\n  return sushi && sushi.masterChefAddress;\n};\nexport const getSushiAddress = sushi => {\n  return sushi && sushi.sushiAddress;\n};\nexport const getWethContract = sushi => {\n  return sushi && sushi.contracts && sushi.contracts.weth;\n};\nexport const getMasterChefContract = sushi => {\n  return sushi && sushi.contracts && sushi.contracts.masterChef;\n};\nexport const getSushiContract = sushi => {\n  return sushi && sushi.contracts && sushi.contracts.sushi;\n};\nexport const getFarms = sushi => {\n  return sushi ? sushi.contracts.pools.map(({\n    pid,\n    name,\n    symbol,\n    icon,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    lpAddress,\n    lpContract,\n    pool\n  }) => ({\n    pid,\n    id: symbol,\n    name,\n    lpToken: symbol,\n    lpTokenAddress: lpAddress,\n    lpContract,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    // earnToken: 'sushi',\n    earnToken: 'sashimi',\n    earnTokenAddress: sushi.contracts.sushi.options.address,\n    icon,\n    pool\n  })) : [];\n};\nexport const getPoolWeight = async (masterChefContract, pid) => {\n  try {\n    const {\n      allocPoint\n    } = await masterChefContract.methods.poolInfo(pid).call();\n    const totalAllocPoint = await masterChefContract.methods.totalAllocPoint().call();\n    return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint));\n  } catch {\n    return new BigNumber(0);\n  }\n};\nexport const getEarned = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.pendingSashimi(pid, account).call();\n};\nexport const getTotalLPWethValue = async (masterChefContract, wethContract, lpContract, tokenContract, pid) => {\n  // Get balance of the token address\n  const tokenAmountWholeLP = await tokenContract.methods.balanceOf(lpContract.options.address).call();\n  const tokenDecimals = await tokenContract.methods.decimals().call(); // Get the share of lpContract that masterChefContract owns\n\n  const balance = await lpContract.methods.balanceOf(masterChefContract.options.address).call(); // Convert that into the portion of total lpContract = p1\n\n  const totalSupply = await lpContract.methods.totalSupply().call(); // Get total weth value for the lpContract = w1\n\n  const lpContractWeth = await wethContract.methods.balanceOf(lpContract.options.address).call(); // Return p1 * w1 * 2\n\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply));\n  const lpWethWorth = new BigNumber(lpContractWeth);\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2)); // Calculate\n\n  const tokenAmount = new BigNumber(tokenAmountWholeLP).times(portionLp).div(new BigNumber(10).pow(tokenDecimals));\n  const wethAmount = new BigNumber(lpContractWeth).times(portionLp).div(new BigNumber(10).pow(18));\n  return {\n    tokenAmount,\n    wethAmount,\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\n    poolWeight: await getPoolWeight(masterChefContract, pid)\n  };\n};\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const getSushiSupply = async sushi => {\n  return new BigNumber((await sushi.contracts.sushi.methods.totalSupply().call()));\n}; //\n\nexport const getPoolStartTime = async masterChefContract => {\n  return await masterChefContract.methods.starttime().call();\n};\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods.deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods.withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.deposit(pid, '0').send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const getStaked = async (masterChefContract, pid, account) => {\n  try {\n    const {\n      amount\n    } = await masterChefContract.methods.userInfo(pid, account).call();\n    return new BigNumber(amount);\n  } catch {\n    return new BigNumber(0);\n  }\n};\nexport const redeem = async (masterChefContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return masterChefContract.methods.exit().send({\n      from: account\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert('pool not active');\n  }\n};\nexport const getPoolContracts = async yam => {\n  const pools = Object.keys(yam.contracts).filter(c => c.indexOf('_pool') !== -1).reduce((acc, cur) => {\n    const newAcc = { ...acc\n    };\n    newAcc[cur] = yam.contracts[cur];\n    return newAcc;\n  }, {});\n  return pools;\n}; // export const getStaked = async (yam, pool, account) => {\n//   return yam.toBigN(await pool.methods.balanceOf(account).call())\n// }\n\nexport const getCurrentPrice = async yam => {\n  // FORBROCK: get current YAM price\n  return yam.toBigN((await yam.contracts.rebaser.methods.getCurrentTWAP().call()));\n};\nexport const getTargetPrice = async yam => {\n  return yam.toBigN(1).toFixed(2);\n};\nexport const getCirculatingSupply = async yam => {\n  let now = await yam.web3.eth.getBlock('latest');\n  let scalingFactor = yam.toBigN((await yam.contracts.yam.methods.yamsScalingFactor().call()));\n  let starttime = yam.toBigN((await yam.contracts.eth_pool.methods.starttime().call())).toNumber();\n  let timePassed = now['timestamp'] - starttime;\n\n  if (timePassed < 0) {\n    return 0;\n  }\n\n  let yamsDistributed = yam.toBigN(8 * timePassed * 250000 / 625000); //yams from first 8 pools\n\n  let starttimePool2 = yam.toBigN((await yam.contracts.ycrv_pool.methods.starttime().call())).toNumber();\n  timePassed = now['timestamp'] - starttime;\n  let pool2Yams = yam.toBigN(timePassed * 1500000 / 625000); // yams from second pool. note: just accounts for first week\n\n  let circulating = pool2Yams.plus(yamsDistributed).times(scalingFactor).div(10 ** 36).toFixed(2);\n  return circulating;\n};\nexport const getNextRebaseTimestamp = async yam => {\n  try {\n    let now = await yam.web3.eth.getBlock('latest').then(res => res.timestamp);\n    let interval = 43200; // 12 hours\n\n    let offset = 28800; // 8am/8pm utc\n\n    let secondsToRebase = 0;\n\n    if (await yam.contracts.rebaser.methods.rebasingActive().call()) {\n      if (now % interval > offset) {\n        secondsToRebase = interval - now % interval + offset;\n      } else {\n        secondsToRebase = offset - now % interval;\n      }\n    } else {\n      let twap_init = yam.toBigN((await yam.contracts.rebaser.methods.timeOfTWAPInit().call())).toNumber();\n\n      if (twap_init > 0) {\n        let delay = yam.toBigN((await yam.contracts.rebaser.methods.rebaseDelay().call())).toNumber();\n        let endTime = twap_init + delay;\n\n        if (endTime % interval > offset) {\n          secondsToRebase = interval - endTime % interval + offset;\n        } else {\n          secondsToRebase = offset - endTime % interval;\n        }\n\n        return endTime + secondsToRebase;\n      } else {\n        return now + 13 * 60 * 60; // just know that its greater than 12 hours away\n      }\n    }\n\n    return secondsToRebase;\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const getTotalSupply = async yam => {\n  return await yam.contracts.yam.methods.totalSupply().call();\n};\nexport const getStats = async yam => {\n  const curPrice = await getCurrentPrice(yam);\n  const circSupply = await getCirculatingSupply(yam);\n  const nextRebase = await getNextRebaseTimestamp(yam);\n  const targetPrice = await getTargetPrice(yam);\n  const totalSupply = await getTotalSupply(yam);\n  return {\n    circSupply,\n    curPrice,\n    nextRebase,\n    targetPrice,\n    totalSupply\n  };\n};\nexport const vote = async (yam, account) => {\n  return yam.contracts.gov.methods.castVote(0, true).send({\n    from: account\n  });\n};\nexport const delegate = async (yam, account) => {\n  return yam.contracts.yam.methods.delegate('0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84').send({\n    from: account\n  });\n};\nexport const didDelegate = async (yam, account) => {\n  return (await yam.contracts.yam.methods.delegates(account).call()) === '0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84';\n};\nexport const getVotes = async yam => {\n  const votesRaw = new BigNumber((await yam.contracts.yam.methods.getCurrentVotes('0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84').call())).div(10 ** 24);\n  return votesRaw;\n};\nexport const getScalingFactor = async yam => {\n  return new BigNumber((await yam.contracts.yam.methods.yamsScalingFactor().call()));\n};\nexport const getDelegatedBalance = async (yam, account) => {\n  return new BigNumber((await yam.contracts.yam.methods.balanceOfUnderlying(account).call())).div(10 ** 24);\n};\nexport const migrate = async (yam, account) => {\n  return yam.contracts.yamV2migration.methods.migrate().send({\n    from: account\n  });\n};\nexport const getMigrationEndTime = async yam => {\n  return yam.toBigN((await yam.contracts.yamV2migration.methods.startTime().call())).plus(yam.toBigN(86400 * 3)).toNumber();\n};","map":{"version":3,"sources":["C:/Users/Kyle/Documents/FOGmist/sashimiswap/frontend/src/sushi/utils.js"],"names":["ethers","Contract","ERC20Abi","BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","getMasterChefAddress","sushi","masterChefAddress","getSushiAddress","sushiAddress","getWethContract","contracts","weth","getMasterChefContract","masterChef","getSushiContract","getFarms","pools","map","pid","name","symbol","icon","tokenAddress","tokenSymbol","tokenContract","lpAddress","lpContract","pool","id","lpToken","lpTokenAddress","earnToken","earnTokenAddress","options","address","getPoolWeight","masterChefContract","allocPoint","methods","poolInfo","call","totalAllocPoint","div","getEarned","account","pendingSashimi","getTotalLPWethValue","wethContract","tokenAmountWholeLP","balanceOf","tokenDecimals","decimals","balance","totalSupply","lpContractWeth","portionLp","lpWethWorth","totalLpWethValue","times","tokenAmount","pow","wethAmount","totalWethValue","tokenPriceInWeth","poolWeight","approve","constants","MaxUint256","send","from","getSushiSupply","getPoolStartTime","starttime","stake","amount","deposit","toString","on","tx","console","log","transactionHash","unstake","withdraw","harvest","getStaked","userInfo","redeem","now","Date","getTime","exit","alert","getPoolContracts","yam","Object","keys","filter","c","indexOf","reduce","acc","cur","newAcc","getCurrentPrice","toBigN","rebaser","getCurrentTWAP","getTargetPrice","toFixed","getCirculatingSupply","web3","eth","getBlock","scalingFactor","yamsScalingFactor","eth_pool","toNumber","timePassed","yamsDistributed","starttimePool2","ycrv_pool","pool2Yams","circulating","plus","getNextRebaseTimestamp","then","res","timestamp","interval","offset","secondsToRebase","rebasingActive","twap_init","timeOfTWAPInit","delay","rebaseDelay","endTime","e","getTotalSupply","getStats","curPrice","circSupply","nextRebase","targetPrice","vote","gov","castVote","delegate","didDelegate","delegates","getVotes","votesRaw","getCurrentVotes","getScalingFactor","getDelegatedBalance","balanceOfUnderlying","migrate","yamV2migration","getMigrationEndTime","startTime"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport ERC20Abi from './lib/abi/erc20.json'\r\n\r\nimport BigNumber from 'bignumber.js'\r\n\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst GAS_LIMIT = {\r\n  STAKING: {\r\n    DEFAULT: 200000,\r\n    SNX: 850000,\r\n  },\r\n}\r\n\r\nexport const getMasterChefAddress = (sushi) => {\r\n  return sushi && sushi.masterChefAddress\r\n}\r\nexport const getSushiAddress = (sushi) => {\r\n  return sushi && sushi.sushiAddress\r\n}\r\nexport const getWethContract = (sushi) => {\r\n  return sushi && sushi.contracts && sushi.contracts.weth\r\n}\r\n\r\nexport const getMasterChefContract = (sushi) => {\r\n  return sushi && sushi.contracts && sushi.contracts.masterChef\r\n}\r\nexport const getSushiContract = (sushi) => {\r\n  return sushi && sushi.contracts && sushi.contracts.sushi\r\n}\r\n\r\nexport const getFarms = (sushi) => {\r\n  return sushi\r\n    ? sushi.contracts.pools.map(\r\n        ({\r\n          pid,\r\n          name,\r\n          symbol,\r\n          icon,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          lpAddress,\r\n          lpContract,\r\n          pool,\r\n        }) => ({\r\n          pid,\r\n          id: symbol,\r\n          name,\r\n          lpToken: symbol,\r\n          lpTokenAddress: lpAddress,\r\n          lpContract,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          // earnToken: 'sushi',\r\n          earnToken: 'sashimi',\r\n          earnTokenAddress: sushi.contracts.sushi.options.address,\r\n          icon,\r\n          pool,\r\n        }),\r\n      )\r\n    : []\r\n}\r\n\r\nexport const getPoolWeight = async (masterChefContract, pid) => {\r\n  try {\r\n    const { allocPoint } = await masterChefContract.methods.poolInfo(pid).call()\r\n    const totalAllocPoint = await masterChefContract.methods\r\n      .totalAllocPoint()\r\n      .call()\r\n    return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint))\r\n  } catch {\r\n    return new BigNumber(0)\r\n  }\r\n}\r\n\r\nexport const getEarned = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods.pendingSashimi(pid, account).call()\r\n}\r\n\r\nexport const getTotalLPWethValue = async (\r\n  masterChefContract,\r\n  wethContract,\r\n  lpContract,\r\n  tokenContract,\r\n  pid,\r\n) => {\r\n  // Get balance of the token address\r\n  const tokenAmountWholeLP = await tokenContract.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  const tokenDecimals = await tokenContract.methods.decimals().call()\r\n  // Get the share of lpContract that masterChefContract owns\r\n  const balance = await lpContract.methods\r\n    .balanceOf(masterChefContract.options.address)\r\n    .call()\r\n  // Convert that into the portion of total lpContract = p1\r\n  const totalSupply = await lpContract.methods.totalSupply().call()\r\n  // Get total weth value for the lpContract = w1\r\n  const lpContractWeth = await wethContract.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  // Return p1 * w1 * 2\r\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply))\r\n  const lpWethWorth = new BigNumber(lpContractWeth)\r\n  const totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2))\r\n  // Calculate\r\n  const tokenAmount = new BigNumber(tokenAmountWholeLP)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(tokenDecimals))\r\n\r\n  const wethAmount = new BigNumber(lpContractWeth)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(18))\r\n  return {\r\n    tokenAmount,\r\n    wethAmount,\r\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\r\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\r\n    poolWeight: await getPoolWeight(masterChefContract, pid),\r\n  }\r\n}\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const getSushiSupply = async (sushi) => {\r\n  return new BigNumber(await sushi.contracts.sushi.methods.totalSupply().call())\r\n}\r\n\r\n//\r\n\r\nexport const getPoolStartTime = async (masterChefContract) => {\r\n  return await masterChefContract.methods.starttime().call()\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const getStaked = async (masterChefContract, pid, account) => {\r\n  try {\r\n    const { amount } = await masterChefContract.methods\r\n      .userInfo(pid, account)\r\n      .call()\r\n    return new BigNumber(amount)\r\n  } catch {\r\n    return new BigNumber(0)\r\n  }\r\n}\r\n\r\nexport const redeem = async (masterChefContract, account) => {\r\n  let now = new Date().getTime() / 1000\r\n  if (now >= 1597172400) {\r\n    return masterChefContract.methods\r\n      .exit()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        console.log(tx)\r\n        return tx.transactionHash\r\n      })\r\n  } else {\r\n    alert('pool not active')\r\n  }\r\n}\r\n\r\nexport const getPoolContracts = async (yam) => {\r\n  const pools = Object.keys(yam.contracts)\r\n    .filter((c) => c.indexOf('_pool') !== -1)\r\n    .reduce((acc, cur) => {\r\n      const newAcc = { ...acc }\r\n      newAcc[cur] = yam.contracts[cur]\r\n      return newAcc\r\n    }, {})\r\n  return pools\r\n}\r\n\r\n// export const getStaked = async (yam, pool, account) => {\r\n//   return yam.toBigN(await pool.methods.balanceOf(account).call())\r\n// }\r\n\r\nexport const getCurrentPrice = async (yam) => {\r\n  // FORBROCK: get current YAM price\r\n  return yam.toBigN(await yam.contracts.rebaser.methods.getCurrentTWAP().call())\r\n}\r\n\r\nexport const getTargetPrice = async (yam) => {\r\n  return yam.toBigN(1).toFixed(2)\r\n}\r\n\r\nexport const getCirculatingSupply = async (yam) => {\r\n  let now = await yam.web3.eth.getBlock('latest')\r\n  let scalingFactor = yam.toBigN(\r\n    await yam.contracts.yam.methods.yamsScalingFactor().call(),\r\n  )\r\n  let starttime = yam\r\n    .toBigN(await yam.contracts.eth_pool.methods.starttime().call())\r\n    .toNumber()\r\n  let timePassed = now['timestamp'] - starttime\r\n  if (timePassed < 0) {\r\n    return 0\r\n  }\r\n  let yamsDistributed = yam.toBigN((8 * timePassed * 250000) / 625000) //yams from first 8 pools\r\n  let starttimePool2 = yam\r\n    .toBigN(await yam.contracts.ycrv_pool.methods.starttime().call())\r\n    .toNumber()\r\n  timePassed = now['timestamp'] - starttime\r\n  let pool2Yams = yam.toBigN((timePassed * 1500000) / 625000) // yams from second pool. note: just accounts for first week\r\n  let circulating = pool2Yams\r\n    .plus(yamsDistributed)\r\n    .times(scalingFactor)\r\n    .div(10 ** 36)\r\n    .toFixed(2)\r\n  return circulating\r\n}\r\n\r\nexport const getNextRebaseTimestamp = async (yam) => {\r\n  try {\r\n    let now = await yam.web3.eth.getBlock('latest').then((res) => res.timestamp)\r\n    let interval = 43200 // 12 hours\r\n    let offset = 28800 // 8am/8pm utc\r\n    let secondsToRebase = 0\r\n    if (await yam.contracts.rebaser.methods.rebasingActive().call()) {\r\n      if (now % interval > offset) {\r\n        secondsToRebase = interval - (now % interval) + offset\r\n      } else {\r\n        secondsToRebase = offset - (now % interval)\r\n      }\r\n    } else {\r\n      let twap_init = yam\r\n        .toBigN(await yam.contracts.rebaser.methods.timeOfTWAPInit().call())\r\n        .toNumber()\r\n      if (twap_init > 0) {\r\n        let delay = yam\r\n          .toBigN(await yam.contracts.rebaser.methods.rebaseDelay().call())\r\n          .toNumber()\r\n        let endTime = twap_init + delay\r\n        if (endTime % interval > offset) {\r\n          secondsToRebase = interval - (endTime % interval) + offset\r\n        } else {\r\n          secondsToRebase = offset - (endTime % interval)\r\n        }\r\n        return endTime + secondsToRebase\r\n      } else {\r\n        return now + 13 * 60 * 60 // just know that its greater than 12 hours away\r\n      }\r\n    }\r\n    return secondsToRebase\r\n  } catch (e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nexport const getTotalSupply = async (yam) => {\r\n  return await yam.contracts.yam.methods.totalSupply().call()\r\n}\r\n\r\nexport const getStats = async (yam) => {\r\n  const curPrice = await getCurrentPrice(yam)\r\n  const circSupply = await getCirculatingSupply(yam)\r\n  const nextRebase = await getNextRebaseTimestamp(yam)\r\n  const targetPrice = await getTargetPrice(yam)\r\n  const totalSupply = await getTotalSupply(yam)\r\n  return {\r\n    circSupply,\r\n    curPrice,\r\n    nextRebase,\r\n    targetPrice,\r\n    totalSupply,\r\n  }\r\n}\r\n\r\nexport const vote = async (yam, account) => {\r\n  return yam.contracts.gov.methods.castVote(0, true).send({ from: account })\r\n}\r\n\r\nexport const delegate = async (yam, account) => {\r\n  return yam.contracts.yam.methods\r\n    .delegate('0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84')\r\n    .send({ from: account })\r\n}\r\n\r\nexport const didDelegate = async (yam, account) => {\r\n  return (\r\n    (await yam.contracts.yam.methods.delegates(account).call()) ===\r\n    '0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84'\r\n  )\r\n}\r\n\r\nexport const getVotes = async (yam) => {\r\n  const votesRaw = new BigNumber(\r\n    await yam.contracts.yam.methods\r\n      .getCurrentVotes('0x683A78bA1f6b25E29fbBC9Cd1BFA29A51520De84')\r\n      .call(),\r\n  ).div(10 ** 24)\r\n  return votesRaw\r\n}\r\n\r\nexport const getScalingFactor = async (yam) => {\r\n  return new BigNumber(\r\n    await yam.contracts.yam.methods.yamsScalingFactor().call(),\r\n  )\r\n}\r\n\r\nexport const getDelegatedBalance = async (yam, account) => {\r\n  return new BigNumber(\r\n    await yam.contracts.yam.methods.balanceOfUnderlying(account).call(),\r\n  ).div(10 ** 24)\r\n}\r\n\r\nexport const migrate = async (yam, account) => {\r\n  return yam.contracts.yamV2migration.methods.migrate().send({ from: account })\r\n}\r\n\r\nexport const getMigrationEndTime = async (yam) => {\r\n  return yam\r\n    .toBigN(await yam.contracts.yamV2migration.methods.startTime().call())\r\n    .plus(yam.toBigN(86400 * 3))\r\n    .toNumber()\r\n}\r\n"]},"metadata":{},"sourceType":"module"}