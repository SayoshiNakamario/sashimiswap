import { GetState, PartialState, SetState, State, StoreApi } from '../vanilla';
declare type DevtoolsType = {
    prefix: string;
    subscribe: (dispatch: any) => () => void;
    unsubscribe: () => void;
    send: (action: string, state: any) => void;
    init: (state: any) => void;
    error: (payload: any) => void;
};
export declare type NamedSet<T extends State> = {
    <K1 extends keyof T, K2 extends keyof T = K1, K3 extends keyof T = K2, K4 extends keyof T = K3>(partial: PartialState<T, K1, K2, K3, K4>, replace?: boolean, name?: string): void;
};
export declare type StoreApiWithDevtools<T extends State> = StoreApi<T> & {
    setState: NamedSet<T>;
    devtools?: DevtoolsType;
};
export declare const devtools: <S extends object, CustomSetState extends SetState<S>, CustomGetState extends GetState<S>, CustomStoreApi extends StoreApi<S>>(fn: (set: NamedSet<S>, get: CustomGetState, api: CustomStoreApi) => S, options?: string | {
    name?: string | undefined;
    serialize?: {
        options: boolean | {
            date?: boolean;
            regex?: boolean;
            undefined?: boolean;
            nan?: boolean;
            infinity?: boolean;
            error?: boolean;
            symbol?: boolean;
            map?: boolean;
            set?: boolean;
        };
    } | undefined;
} | undefined) => (set: CustomSetState, get: CustomGetState, api: CustomStoreApi & StoreApi<S> & {
    setState: NamedSet<S>;
    devtools?: DevtoolsType | undefined;
} & {
    dispatch?: unknown;
}) => S;
export {};
